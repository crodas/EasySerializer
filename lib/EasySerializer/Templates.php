<?php
/**
 *  This file was generated with crodas/SimpleView (https://github.com/crodas/SimpleView)
 *  Do not edit this file.
 *
 */

namespace {


    $GLOBALS['file_54ab52d59c7b1'] = array();
    $GLOBALS['line_54ab52d59c7b1'] = array();

    class base_template_b0d5524e6dece31451000574f8d7b9fa5cbb001f
    {
        protected $parent;
        protected $child;
        protected $context;

        public function yield_parent($name, $args)
        {
            $method = "section_" . sha1($name);

            if (is_callable(array($this->parent, $method))) {
                $this->parent->$method(array_merge($this->context, $args));
                return true;
            }

            if ($this->parent) {
                return $this->parent->yield_parent($name, $args);
            }

            return false;
        }

        public function do_yield($name, Array $args = array())
        {
            if ($this->child) {
                // We have a children template, we are their base
                // so let's see if they have implemented by any change
                // this section
                if ($this->child->do_yield($name, $args)) {
                    // yes!
                    return true;
                }
            }

            // Do I have this section defined?
            $method = "section_" . sha1($name);
            if (is_callable(array($this, $method))) {
                // Yes!
                $this->$method(array_merge($this->context, $args));
                return true;
            }

            // No :-(
            return false;
        }

    }

    /** 
     *  Template class generated from Serializer.tpl
     */
    class class_68c18661b4aada310732b257d7fd60e7a63a22e7 extends base_template_b0d5524e6dece31451000574f8d7b9fa5cbb001f
    {

        public function hasSection($name)
        {

            return false;
        }


        public function renderSection($name, Array $args = array(), $fail_on_missing = true)
        {
            if (!$this->hasSection($name)) {
                if ($fail_on_missing) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }
                return "";
            }

        }

        public function render(Array $vars = array(), $return = false)
        {
            try {
                return $this->_render($vars, $return);
            } catch (\Exception $e) {
                if ($return) ob_get_clean();
                throw new EasySerializer\ExceptionWrapper($e, __FILE__);
            }
        }

        public function _render(Array $vars = array(), $return = false)
        {
            global $file_54ab52d59c7b1, $line_54ab52d59c7b1;
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }
            $_54ab52d59c7b1 = array_push($file_54ab52d59c7b1, 'Serializer.tpl') - 1;
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 1;

            echo "<?php\n\n";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 3;
            $ns = 'EasySerialize\\n' . uniqid(true);
            $this->context['ns'] = $ns;
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 4;
            echo "\nnamespace ";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 5;
            echo $ns . ";\n\nuse ";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 7;
            echo $validator->getNamespace() . " as v;\n\nfunction write_property(\$obj, \$property, \$value)\n{\n    \$ref = new \\ReflectionProperty(\$obj, \$property);\n    \$ref->setAccesible(true);\n    return \$ref->setValue(\$obj, \$value);\n}\n\nspl_autoload_register(function(\$class) {\n    switch(strtolower(\$class)) {\n";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 18;
            foreach($classes as $class => $obj) {

                $this->context['class'] = $class;
                $this->context['obj'] = $obj;
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 19;
                echo "    case ";
                var_export($class);
                echo ":\n        require ";
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 20;
                var_export($obj->getFile());
                echo ";\n        return true;\n";
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 22;
            }
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 23;
            echo "    }\n\n    return false;\n});\n\nclass Serializer\n{\n    protected \$encoders = array(\n        'encode' => 'json_encode',\n        'decode' => 'json_decode',\n    );\n\n    public function setFunction(\$encode, \$decode)\n    {\n        foreach (['encode', 'decode'] as \$type) {\n            if (!is_callable(\$\$type)) {\n                throw new \\InvalidArgumentException(\"\$type is not callable\");\n            }\n        }\n        \$this->encoders = compact('encode', 'decode');\n    }\n\n    public function serialize(\$object, \$raw = false)\n    {\n        \$array = v\\get_object_properties(\$object);\n\n        switch (strtolower(get_class(\$object))) {\n";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 50;
            foreach($classes as $class => $obj) {

                $this->context['class'] = $class;
                $this->context['obj'] = $obj;
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 51;
                echo "        case ";
                var_export($class);
                echo ":\n";
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 52;
                foreach($obj->GetProperties() as $prop) {

                    $this->context['prop'] = $prop;
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 53;
                    if ($prop->has('Required')) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 54;
                        echo "                if (empty(\$array[";
                        var_export($prop['property']);
                        echo "])) {\n                    throw new \\EasySerializer\\Exception\\MissingProperty(";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 55;
                        var_export($class);
                        echo ", ";
                        var_export($prop['property']);
                        echo ");\n                }\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 57;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 58;
                    if ($prop->has('Object')) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 59;
                        if ($prop->has('Required')) {
                            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 60;
                            echo "                    else {\n";
                            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 61;
                        }
                        else {
                            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 62;
                            echo "                    if (!empty(\$array[";
                            var_export($prop['property']);
                            echo "])) {\n";
                            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 63;
                        }
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 64;
                        echo "                        \$array[";
                        var_export($prop['property']);
                        echo "] = \$this->serialize(\$array[";
                        var_export($prop['property']);
                        echo "], true);\n                    }\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 66;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 67;
                }
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 68;
                echo "            break;\n";
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 69;
            }
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 70;
            echo "        }\n        return  \$raw ? \$array : \$this->encoders['encode'](\$array);\n    }\n\n    public function deserialize(\$str, \$class)\n    {\n        \$array = (array)(is_scalar(\$str) ? \$this->encoders['decode'](\$str) : \$str);\n        if (is_object(\$class)) {\n            \$object = \$class;\n            \$class  = get_class(\$object);\n        } else {\n            \$object = new \$class;\n        }\n\n        switch (strtolower(\$class)) {\n";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 85;
            foreach($classes as $class => $obj) {

                $this->context['class'] = $class;
                $this->context['obj'] = $obj;
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 86;
                echo "        case ";
                var_export($class);
                echo ":\n";
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 87;
                foreach($obj->getProperties() as $prop) {

                    $this->context['prop'] = $prop;
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 88;
                    echo "                if (!empty(\$array[";
                    var_export($prop['property']);
                    echo "])) {\n";
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 89;
                    if ($prop->has('Object')) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 90;
                        echo "                    \$array[";
                        var_export($prop['property']);
                        echo "] = \$this->deserialize(\$array[";
                        var_export($prop['property']);
                        echo "], ";
                        var_export(current($prop->getOne('Object')));
                        echo ");\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 91;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 92;
                    $val = strtolower($prop['class'] . "::" . $prop['property']);
                    $this->context['val'] = $val;
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 93;
                    if ($validator->hasRules($val)) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 94;
                        echo "                    if (v\\validate_" . (sha1($val)) . "(\$array[";
                        var_export($prop['property']);
                        echo "]) === false) {\n                        throw new \\EasySerializer\\Exception\\Validation(";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 95;
                        var_export($class);
                        echo ", ";
                        var_export($prop['property']);
                        echo ");\n                    }\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 97;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 98;
                    echo "                /**\n                  ";
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 99;
                    var_export($prop);
                    echo "\n                */\n";
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 101;
                    if ($prop->hasAnnotation('Base64')) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 102;
                        echo "                    \$array[";
                        var_export($prop['property']);
                        echo "] = base64_decode(\$array[";
                        var_export($prop['property']);
                        echo "]);\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 103;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 104;
                    if (in_array('public', $prop->getMetadata()['visibility'])) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 105;
                        echo "                    \$object->" . ($prop['property']) . " = \$array[";
                        var_export($prop['property']);
                        echo "];\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 106;
                    }
                    else {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 107;
                        echo "                    write_property(\$object, ";
                        var_export($prop['property']);
                        echo ", \$array[";
                        var_export($prop['property']);
                        echo "]);\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 108;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 109;
                    if ($prop->has('Required')) {
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 110;
                        echo "                } else {\n                    throw new \\EasySerializer\\Exception\\MissingProperty(";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 111;
                        var_export($class);
                        echo ", ";
                        var_export($prop['property']);
                        echo ");\n";
                        $line_54ab52d59c7b1[$_54ab52d59c7b1] = 112;
                    }
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 113;
                    echo "                }\n";
                    $line_54ab52d59c7b1[$_54ab52d59c7b1] = 114;
                }
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 115;
                echo "            break;\n";
                $line_54ab52d59c7b1[$_54ab52d59c7b1] = 116;
            }
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 117;
            echo "        default:\n            throw new \\InvalidArgumentException(\"Cannot find serializer for class \" . get_class(\$obj));\n        }\n\n        return \$object;\n    }\n}\n\n";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 125;
            echo substr($validator->getCode(), 5) . "\n\nreturn new \\";
            $line_54ab52d59c7b1[$_54ab52d59c7b1] = 127;
            echo $ns . "\\Serializer;\n";

            array_pop($file_54ab52d59c7b1);

            if ($return) {
                return ob_get_clean();
            }

        }
    }

}

namespace EasySerializer {

    use Exception;

    class ExceptionWrapper extends Exception
    {
        public $e;
        protected $file;

        public function getSimpleViewTrace()
        {
            global $file_54ab52d59c7b1, $line_54ab52d59c7b1;

            $traces = $this->e->getTrace();
            $i = 0;
            foreach ($traces as &$trace) {
                if (!empty($trace['file'])
                    && $trace['file'] == $this->file && !empty($file_54ab52d59c7b1[$i])) {
                    $trace['file'] = $file_54ab52d59c7b1[$i];
                    $trace['line'] = $line_54ab52d59c7b1[$i];
                    ++$i;
                }
                if (empty($trace['file'])) {
                    $trace['file'] = '[internal function]';
                }
                if (empty($trace['line'])) {
                    $trace['line'] = '';
                }
            }

            return $traces;
        }

        public function __toString()
        {
            $traces = $this->getSimpleViewTrace();
            $str    = "exception '" . get_class($this->e) . "' in {$traces[0]['file']}{$traces[0]['line']}:\nStack trace:\n";
            foreach ($traces as $i => $trace) {
                $str .= "#{$i} {$trace['file']}:{$trace['line']}\n";
            }
            ++$i;
            $str .= "#{$i} {main}";
            return $str;
        }

        public function __construct(Exception $e, $file)
        {
            $this->e    = $e;
            $this->file = $file;
        }
    }


    class Templates
    {
        public static function getAll()
        {
            return array (
                0 => 'serializer',
            );
        }

        public static function getAllSections($name, $fail = true)
        {
            switch ($name) {
            default:
                if ($fail) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }

                return array();
            }
        }

        public static function exec($name, Array $context = array(), Array $global = array())
        {
            $tpl = self::get($name);
            return $tpl->render(array_merge($global, $context));
        }

        public static function get($name, Array $context = array())
        {
            static $classes = array (
                'serializer.tpl' => 'class_68c18661b4aada310732b257d7fd60e7a63a22e7',
                'serializer' => 'class_68c18661b4aada310732b257d7fd60e7a63a22e7',
            );
            $name = strtolower($name);
            if (empty($classes[$name])) {
                throw new \RuntimeException("Cannot find template $name");
            }

            $class = "\\" . $classes[$name];
            return new $class;
        }
    }

}
